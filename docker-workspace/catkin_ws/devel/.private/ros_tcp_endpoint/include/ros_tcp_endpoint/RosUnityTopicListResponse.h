// Generated by gencpp from file ros_tcp_endpoint/RosUnityTopicListResponse.msg
// DO NOT EDIT!


#ifndef ROS_TCP_ENDPOINT_MESSAGE_ROSUNITYTOPICLISTRESPONSE_H
#define ROS_TCP_ENDPOINT_MESSAGE_ROSUNITYTOPICLISTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_tcp_endpoint
{
template <class ContainerAllocator>
struct RosUnityTopicListResponse_
{
  typedef RosUnityTopicListResponse_<ContainerAllocator> Type;

  RosUnityTopicListResponse_()
    : topics()  {
    }
  RosUnityTopicListResponse_(const ContainerAllocator& _alloc)
    : topics(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _topics_type;
  _topics_type topics;





  typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RosUnityTopicListResponse_

typedef ::ros_tcp_endpoint::RosUnityTopicListResponse_<std::allocator<void> > RosUnityTopicListResponse;

typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnityTopicListResponse > RosUnityTopicListResponsePtr;
typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnityTopicListResponse const> RosUnityTopicListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator1> & lhs, const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.topics == rhs.topics;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator1> & lhs, const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_tcp_endpoint

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0eef9a05d4e829092fc2f2c3c2aad3d";
  }

  static const char* value(const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0eef9a05d4e8290ULL;
  static const uint64_t static_value2 = 0x92fc2f2c3c2aad3dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_tcp_endpoint/RosUnityTopicListResponse";
  }

  static const char* value(const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] topics\n"
;
  }

  static const char* value(const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topics);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RosUnityTopicListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_tcp_endpoint::RosUnityTopicListResponse_<ContainerAllocator>& v)
  {
    s << indent << "topics[]" << std::endl;
    for (size_t i = 0; i < v.topics.size(); ++i)
    {
      s << indent << "  topics[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topics[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TCP_ENDPOINT_MESSAGE_ROSUNITYTOPICLISTRESPONSE_H

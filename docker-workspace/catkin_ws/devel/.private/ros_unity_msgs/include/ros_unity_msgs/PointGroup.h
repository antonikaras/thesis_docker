// Generated by gencpp from file ros_unity_msgs/PointGroup.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_MSGS_MESSAGE_POINTGROUP_H
#define ROS_UNITY_MSGS_MESSAGE_POINTGROUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_unity_msgs
{
template <class ContainerAllocator>
struct PointGroup_
{
  typedef PointGroup_<ContainerAllocator> Type;

  PointGroup_()
    : map_pos()
    , group_id(0)
    , map_origin()
    , map_dims()
    , map_resolution(0.0)
    , associated_file()  {
    }
  PointGroup_(const ContainerAllocator& _alloc)
    : map_pos(_alloc)
    , group_id(0)
    , map_origin(_alloc)
    , map_dims(_alloc)
    , map_resolution(0.0)
    , associated_file(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _map_pos_type;
  _map_pos_type map_pos;

   typedef int32_t _group_id_type;
  _group_id_type group_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _map_origin_type;
  _map_origin_type map_origin;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _map_dims_type;
  _map_dims_type map_dims;

   typedef float _map_resolution_type;
  _map_resolution_type map_resolution;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _associated_file_type;
  _associated_file_type associated_file;





  typedef boost::shared_ptr< ::ros_unity_msgs::PointGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_msgs::PointGroup_<ContainerAllocator> const> ConstPtr;

}; // struct PointGroup_

typedef ::ros_unity_msgs::PointGroup_<std::allocator<void> > PointGroup;

typedef boost::shared_ptr< ::ros_unity_msgs::PointGroup > PointGroupPtr;
typedef boost::shared_ptr< ::ros_unity_msgs::PointGroup const> PointGroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_msgs::PointGroup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_msgs::PointGroup_<ContainerAllocator1> & lhs, const ::ros_unity_msgs::PointGroup_<ContainerAllocator2> & rhs)
{
  return lhs.map_pos == rhs.map_pos &&
    lhs.group_id == rhs.group_id &&
    lhs.map_origin == rhs.map_origin &&
    lhs.map_dims == rhs.map_dims &&
    lhs.map_resolution == rhs.map_resolution &&
    lhs.associated_file == rhs.associated_file;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_msgs::PointGroup_<ContainerAllocator1> & lhs, const ::ros_unity_msgs::PointGroup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_msgs::PointGroup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_msgs::PointGroup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_msgs::PointGroup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1260362be9abca30f61b84d7c4b3dc52";
  }

  static const char* value(const ::ros_unity_msgs::PointGroup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1260362be9abca30ULL;
  static const uint64_t static_value2 = 0xf61b84d7c4b3dc52ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_msgs/PointGroup";
  }

  static const char* value(const ::ros_unity_msgs::PointGroup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] map_pos\n"
"int32 group_id\n"
"float32[] map_origin\n"
"float32[] map_dims\n"
"float32 map_resolution\n"
"string associated_file \n"
;
  }

  static const char* value(const ::ros_unity_msgs::PointGroup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_pos);
      stream.next(m.group_id);
      stream.next(m.map_origin);
      stream.next(m.map_dims);
      stream.next(m.map_resolution);
      stream.next(m.associated_file);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointGroup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_msgs::PointGroup_<ContainerAllocator>& v)
  {
    s << indent << "map_pos[]" << std::endl;
    for (size_t i = 0; i < v.map_pos.size(); ++i)
    {
      s << indent << "  map_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.map_pos[i]);
    }
    s << indent << "group_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.group_id);
    s << indent << "map_origin[]" << std::endl;
    for (size_t i = 0; i < v.map_origin.size(); ++i)
    {
      s << indent << "  map_origin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.map_origin[i]);
    }
    s << indent << "map_dims[]" << std::endl;
    for (size_t i = 0; i < v.map_dims.size(); ++i)
    {
      s << indent << "  map_dims[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.map_dims[i]);
    }
    s << indent << "map_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.map_resolution);
    s << indent << "associated_file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.associated_file);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_MSGS_MESSAGE_POINTGROUP_H

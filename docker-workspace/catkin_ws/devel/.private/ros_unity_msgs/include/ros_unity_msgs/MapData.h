// Generated by gencpp from file ros_unity_msgs/MapData.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_MSGS_MESSAGE_MAPDATA_H
#define ROS_UNITY_MSGS_MESSAGE_MAPDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_unity_msgs
{
template <class ContainerAllocator>
struct MapData_
{
  typedef MapData_<ContainerAllocator> Type;

  MapData_()
    : width(0)
    , height(0)
    , map()
    , resolution(0.0)
    , origin()  {
      origin.assign(0.0);
  }
  MapData_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , map(_alloc)
    , resolution(0.0)
    , origin()  {
  (void)_alloc;
      origin.assign(0.0);
  }



   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _map_type;
  _map_type map;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef boost::array<float, 7>  _origin_type;
  _origin_type origin;





  typedef boost::shared_ptr< ::ros_unity_msgs::MapData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_msgs::MapData_<ContainerAllocator> const> ConstPtr;

}; // struct MapData_

typedef ::ros_unity_msgs::MapData_<std::allocator<void> > MapData;

typedef boost::shared_ptr< ::ros_unity_msgs::MapData > MapDataPtr;
typedef boost::shared_ptr< ::ros_unity_msgs::MapData const> MapDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_msgs::MapData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_msgs::MapData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_msgs::MapData_<ContainerAllocator1> & lhs, const ::ros_unity_msgs::MapData_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.map == rhs.map &&
    lhs.resolution == rhs.resolution &&
    lhs.origin == rhs.origin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_msgs::MapData_<ContainerAllocator1> & lhs, const ::ros_unity_msgs::MapData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_unity_msgs::MapData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_msgs::MapData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_msgs::MapData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_msgs::MapData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_msgs::MapData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_msgs::MapData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_msgs::MapData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56aa2e0b034c9d2334b16995b3576454";
  }

  static const char* value(const ::ros_unity_msgs::MapData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56aa2e0b034c9d23ULL;
  static const uint64_t static_value2 = 0x34b16995b3576454ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_msgs::MapData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_msgs/MapData";
  }

  static const char* value(const ::ros_unity_msgs::MapData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_msgs::MapData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 width\n"
"uint32 height\n"
"int32[] map\n"
"float32 resolution\n"
"float32[7] origin \n"
;
  }

  static const char* value(const ::ros_unity_msgs::MapData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_msgs::MapData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.map);
      stream.next(m.resolution);
      stream.next(m.origin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_msgs::MapData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_msgs::MapData_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map[i]);
    }
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "origin[]" << std::endl;
    for (size_t i = 0; i < v.origin.size(); ++i)
    {
      s << indent << "  origin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.origin[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_MSGS_MESSAGE_MAPDATA_H

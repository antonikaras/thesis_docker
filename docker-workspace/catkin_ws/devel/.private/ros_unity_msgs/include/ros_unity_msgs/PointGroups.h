// Generated by gencpp from file ros_unity_msgs/PointGroups.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_MSGS_MESSAGE_POINTGROUPS_H
#define ROS_UNITY_MSGS_MESSAGE_POINTGROUPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_unity_msgs/PointGroup.h>

namespace ros_unity_msgs
{
template <class ContainerAllocator>
struct PointGroups_
{
  typedef PointGroups_<ContainerAllocator> Type;

  PointGroups_()
    : groups()  {
    }
  PointGroups_(const ContainerAllocator& _alloc)
    : groups(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_unity_msgs::PointGroup_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >::other >  _groups_type;
  _groups_type groups;





  typedef boost::shared_ptr< ::ros_unity_msgs::PointGroups_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_msgs::PointGroups_<ContainerAllocator> const> ConstPtr;

}; // struct PointGroups_

typedef ::ros_unity_msgs::PointGroups_<std::allocator<void> > PointGroups;

typedef boost::shared_ptr< ::ros_unity_msgs::PointGroups > PointGroupsPtr;
typedef boost::shared_ptr< ::ros_unity_msgs::PointGroups const> PointGroupsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_msgs::PointGroups_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_msgs::PointGroups_<ContainerAllocator1> & lhs, const ::ros_unity_msgs::PointGroups_<ContainerAllocator2> & rhs)
{
  return lhs.groups == rhs.groups;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_msgs::PointGroups_<ContainerAllocator1> & lhs, const ::ros_unity_msgs::PointGroups_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_msgs::PointGroups_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_msgs::PointGroups_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_msgs::PointGroups_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2c4e3a8563a46ea18da5c6f66021358";
  }

  static const char* value(const ::ros_unity_msgs::PointGroups_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2c4e3a8563a46eaULL;
  static const uint64_t static_value2 = 0x18da5c6f66021358ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_msgs/PointGroups";
  }

  static const char* value(const ::ros_unity_msgs::PointGroups_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PointGroup[] groups\n"
"================================================================================\n"
"MSG: ros_unity_msgs/PointGroup\n"
"float32[] map_pos\n"
"int32 group_id\n"
"float32[] map_origin\n"
"float32[] map_dims\n"
"float32 map_resolution\n"
"string associated_file \n"
;
  }

  static const char* value(const ::ros_unity_msgs::PointGroups_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.groups);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointGroups_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_msgs::PointGroups_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_msgs::PointGroups_<ContainerAllocator>& v)
  {
    s << indent << "groups[]" << std::endl;
    for (size_t i = 0; i < v.groups.size(); ++i)
    {
      s << indent << "  groups[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_unity_msgs::PointGroup_<ContainerAllocator> >::stream(s, indent + "    ", v.groups[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_MSGS_MESSAGE_POINTGROUPS_H
